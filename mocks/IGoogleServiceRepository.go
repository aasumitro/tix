// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	context "context"

	forms "google.golang.org/api/forms/v1"

	mock "github.com/stretchr/testify/mock"
)

// IGoogleServiceRepository is an autogenerated mock type for the IGoogleServiceRepository type
type IGoogleServiceRepository struct {
	mock.Mock
}

// GetEvent provides a mock function with given fields: ctx, formID
func (_m *IGoogleServiceRepository) GetEvent(ctx context.Context, formID string) (*forms.Form, error) {
	ret := _m.Called(ctx, formID)

	var r0 *forms.Form
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*forms.Form, error)); ok {
		return rf(ctx, formID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *forms.Form); ok {
		r0 = rf(ctx, formID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*forms.Form)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, formID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResponses provides a mock function with given fields: ctx, formID
func (_m *IGoogleServiceRepository) GetResponses(ctx context.Context, formID string) (*forms.ListFormResponsesResponse, error) {
	ret := _m.Called(ctx, formID)

	var r0 *forms.ListFormResponsesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*forms.ListFormResponsesResponse, error)); ok {
		return rf(ctx, formID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *forms.ListFormResponsesResponse); ok {
		r0 = rf(ctx, formID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*forms.ListFormResponsesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, formID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIGoogleServiceRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIGoogleServiceRepository creates a new instance of IGoogleServiceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIGoogleServiceRepository(t mockConstructorTestingTNewIGoogleServiceRepository) *IGoogleServiceRepository {
	mock := &IGoogleServiceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
