// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	request "github.com/aasumitro/tix/internal/domain/request"

	response "github.com/aasumitro/tix/internal/domain/response"
)

// ITixService is an autogenerated mock type for the ITixService type
type ITixService struct {
	mock.Mock
}

// DeleteUser provides a mock function with given fields: ctx, uuid
func (_m *ITixService) DeleteUser(ctx context.Context, uuid string) error {
	ret := _m.Called(ctx, uuid)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExportEvent provides a mock function with given fields: ctx, googleFormID, exportFileType, targetEmail
func (_m *ITixService) ExportEvent(ctx context.Context, googleFormID string, exportFileType string, targetEmail string) error {
	ret := _m.Called(ctx, googleFormID, exportFileType, targetEmail)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, googleFormID, exportFileType, targetEmail)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchEvents provides a mock function with given fields: ctx
func (_m *ITixService) FetchEvents(ctx context.Context) ([]*response.EventResponse, error) {
	ret := _m.Called(ctx)

	var r0 []*response.EventResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*response.EventResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*response.EventResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*response.EventResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchForms provides a mock function with given fields: ctx, formID
func (_m *ITixService) FetchForms(ctx context.Context, formID string) ([]*response.GoogleFormQuestion, error) {
	ret := _m.Called(ctx, formID)

	var r0 []*response.GoogleFormQuestion
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*response.GoogleFormQuestion, error)); ok {
		return rf(ctx, formID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*response.GoogleFormQuestion); ok {
		r0 = rf(ctx, formID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*response.GoogleFormQuestion)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, formID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchOverview provides a mock function with given fields: ctx, googleFormID
func (_m *ITixService) FetchOverview(ctx context.Context, googleFormID string) (*response.EventOverviewResponse, error) {
	ret := _m.Called(ctx, googleFormID)

	var r0 *response.EventOverviewResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*response.EventOverviewResponse, error)); ok {
		return rf(ctx, googleFormID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *response.EventOverviewResponse); ok {
		r0 = rf(ctx, googleFormID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.EventOverviewResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, googleFormID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchParticipants provides a mock function with given fields: ctx, googleFormID
func (_m *ITixService) FetchParticipants(ctx context.Context, googleFormID string) ([]*response.ParticipantResponse, error) {
	ret := _m.Called(ctx, googleFormID)

	var r0 []*response.ParticipantResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*response.ParticipantResponse, error)); ok {
		return rf(ctx, googleFormID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*response.ParticipantResponse); ok {
		r0 = rf(ctx, googleFormID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*response.ParticipantResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, googleFormID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchResponds provides a mock function with given fields: ctx, formID
func (_m *ITixService) FetchResponds(ctx context.Context, formID string) ([]*response.GoogleFormRespond, error) {
	ret := _m.Called(ctx, formID)

	var r0 []*response.GoogleFormRespond
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*response.GoogleFormRespond, error)); ok {
		return rf(ctx, formID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*response.GoogleFormRespond); ok {
		r0 = rf(ctx, formID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*response.GoogleFormRespond)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, formID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchUsers provides a mock function with given fields: ctx, email
func (_m *ITixService) FetchUsers(ctx context.Context, email string) ([]*response.UserResponse, error) {
	ret := _m.Called(ctx, email)

	var r0 []*response.UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*response.UserResponse, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*response.UserResponse); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*response.UserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateMagicLink provides a mock function with given fields: ctx, email
func (_m *ITixService) GenerateMagicLink(ctx context.Context, email string) *response.ServiceSingleRespond {
	ret := _m.Called(ctx, email)

	var r0 *response.ServiceSingleRespond
	if rf, ok := ret.Get(0).(func(context.Context, string) *response.ServiceSingleRespond); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.ServiceSingleRespond)
		}
	}

	return r0
}

// GenerateTicket provides a mock function with given fields: ctx, googleFormID, participantID
func (_m *ITixService) GenerateTicket(ctx context.Context, googleFormID string, participantID int32) error {
	ret := _m.Called(ctx, googleFormID, participantID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int32) error); ok {
		r0 = rf(ctx, googleFormID, participantID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InviteUserByEmail provides a mock function with given fields: ctx, email
func (_m *ITixService) InviteUserByEmail(ctx context.Context, email string) *response.ServiceSingleRespond {
	ret := _m.Called(ctx, email)

	var r0 *response.ServiceSingleRespond
	if rf, ok := ret.Get(0).(func(context.Context, string) *response.ServiceSingleRespond); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.ServiceSingleRespond)
		}
	}

	return r0
}

// PublishExportEventDataQueue provides a mock function with given fields: ctx, googleFormID, exportType, email
func (_m *ITixService) PublishExportEventDataQueue(ctx context.Context, googleFormID string, exportType string, email string) error {
	ret := _m.Called(ctx, googleFormID, exportType, email)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, googleFormID, exportType, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PublishGenerateEventTicketQueue provides a mock function with given fields: ctx, googleFormID, participantID
func (_m *ITixService) PublishGenerateEventTicketQueue(ctx context.Context, googleFormID string, participantID int32) error {
	ret := _m.Called(ctx, googleFormID, participantID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int32) error); ok {
		r0 = rf(ctx, googleFormID, participantID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PublishSyncEventDataQueue provides a mock function with given fields: ctx, googleFormID
func (_m *ITixService) PublishSyncEventDataQueue(ctx context.Context, googleFormID string) error {
	ret := _m.Called(ctx, googleFormID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, googleFormID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetUserAsVerified provides a mock function with given fields: ctx, email
func (_m *ITixService) SetUserAsVerified(ctx context.Context, email string) error {
	ret := _m.Called(ctx, email)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreEvent provides a mock function with given fields: ctx, form
func (_m *ITixService) StoreEvent(ctx context.Context, form *request.EventRequestMakeNew) (*response.EventResponse, error) {
	ret := _m.Called(ctx, form)

	var r0 *response.EventResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *request.EventRequestMakeNew) (*response.EventResponse, error)); ok {
		return rf(ctx, form)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *request.EventRequestMakeNew) *response.EventResponse); ok {
		r0 = rf(ctx, form)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.EventResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *request.EventRequestMakeNew) error); ok {
		r1 = rf(ctx, form)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SyncRespondData provides a mock function with given fields: ctx, formID
func (_m *ITixService) SyncRespondData(ctx context.Context, formID string) error {
	ret := _m.Called(ctx, formID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, formID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateParticipantStatus provides a mock function with given fields: ctx, googleFormID, participantID, form
func (_m *ITixService) UpdateParticipantStatus(ctx context.Context, googleFormID string, participantID int32, form *request.EventRequestUpdateParticipant) error {
	ret := _m.Called(ctx, googleFormID, participantID, form)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int32, *request.EventRequestUpdateParticipant) error); ok {
		r0 = rf(ctx, googleFormID, participantID, form)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewITixService interface {
	mock.TestingT
	Cleanup(func())
}

// NewITixService creates a new instance of ITixService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewITixService(t mockConstructorTestingTNewITixService) *ITixService {
	mock := &ITixService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
