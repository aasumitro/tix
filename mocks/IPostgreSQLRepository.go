// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/aasumitro/tix/common"

	entity "github.com/aasumitro/tix/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"

	request "github.com/aasumitro/tix/internal/domain/request"
)

// IPostgreSQLRepository is an autogenerated mock type for the IPostgreSQLRepository type
type IPostgreSQLRepository struct {
	mock.Mock
}

// CountParticipants provides a mock function with given fields: ctx, eventID, participantStatus, startBetween, endBetween
func (_m *IPostgreSQLRepository) CountParticipants(ctx context.Context, eventID int32, participantStatus common.EventParticipantStatus, startBetween int64, endBetween int64) int {
	ret := _m.Called(ctx, eventID, participantStatus, startBetween, endBetween)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, int32, common.EventParticipantStatus, int64, int64) int); ok {
		r0 = rf(ctx, eventID, participantStatus, startBetween, endBetween)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// CountUsers provides a mock function with given fields: ctx
func (_m *IPostgreSQLRepository) CountUsers(ctx context.Context) int {
	ret := _m.Called(ctx)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: ctx, email
func (_m *IPostgreSQLRepository) DeleteUser(ctx context.Context, email string) error {
	ret := _m.Called(ctx, email)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllEvents provides a mock function with given fields: ctx
func (_m *IPostgreSQLRepository) GetAllEvents(ctx context.Context) ([]*entity.Event, error) {
	ret := _m.Called(ctx)

	var r0 []*entity.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*entity.Event, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*entity.Event); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllParticipants provides a mock function with given fields: ctx, eventID, filter, startBetween, endBetween, limit, sortKey, sortDir
func (_m *IPostgreSQLRepository) GetAllParticipants(ctx context.Context, eventID int32, filter string, startBetween int64, endBetween int64, limit int32, sortKey string, sortDir string) ([]*entity.Participant, error) {
	ret := _m.Called(ctx, eventID, filter, startBetween, endBetween, limit, sortKey, sortDir)

	var r0 []*entity.Participant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, string, int64, int64, int32, string, string) ([]*entity.Participant, error)); ok {
		return rf(ctx, eventID, filter, startBetween, endBetween, limit, sortKey, sortDir)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, string, int64, int64, int32, string, string) []*entity.Participant); ok {
		r0 = rf(ctx, eventID, filter, startBetween, endBetween, limit, sortKey, sortDir)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Participant)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, string, int64, int64, int32, string, string) error); ok {
		r1 = rf(ctx, eventID, filter, startBetween, endBetween, limit, sortKey, sortDir)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllUsers provides a mock function with given fields: ctx, email
func (_m *IPostgreSQLRepository) GetAllUsers(ctx context.Context, email string) ([]*entity.User, error) {
	ret := _m.Called(ctx, email)

	var r0 []*entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*entity.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*entity.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventByGoogleFormID provides a mock function with given fields: ctx, googleFormID
func (_m *IPostgreSQLRepository) GetEventByGoogleFormID(ctx context.Context, googleFormID string) (*entity.Event, error) {
	ret := _m.Called(ctx, googleFormID)

	var r0 *entity.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.Event, error)); ok {
		return rf(ctx, googleFormID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Event); ok {
		r0 = rf(ctx, googleFormID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, googleFormID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetParticipantByEmailAndEventID provides a mock function with given fields: ctx, email, eventID
func (_m *IPostgreSQLRepository) GetParticipantByEmailAndEventID(ctx context.Context, email string, eventID int32) (*entity.Participant, error) {
	ret := _m.Called(ctx, email, eventID)

	var r0 *entity.Participant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int32) (*entity.Participant, error)); ok {
		return rf(ctx, email, eventID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int32) *entity.Participant); ok {
		r0 = rf(ctx, email, eventID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Participant)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int32) error); ok {
		r1 = rf(ctx, email, eventID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetParticipantByIDAndEventID provides a mock function with given fields: ctx, participantID, eventID
func (_m *IPostgreSQLRepository) GetParticipantByIDAndEventID(ctx context.Context, participantID int32, eventID int32) (*entity.Participant, error) {
	ret := _m.Called(ctx, participantID, eventID)

	var r0 *entity.Participant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) (*entity.Participant, error)); ok {
		return rf(ctx, participantID, eventID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) *entity.Participant); ok {
		r0 = rf(ctx, participantID, eventID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Participant)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, int32) error); ok {
		r1 = rf(ctx, participantID, eventID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *IPostgreSQLRepository) GetUserByEmail(ctx context.Context, email string) (*entity.User, error) {
	ret := _m.Called(ctx, email)

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertManyParticipants provides a mock function with given fields: ctx, participants, createdAt
func (_m *IPostgreSQLRepository) InsertManyParticipants(ctx context.Context, participants []*entity.Participant, createdAt int64) error {
	ret := _m.Called(ctx, participants, createdAt)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*entity.Participant, int64) error); ok {
		r0 = rf(ctx, participants, createdAt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertNewEvent provides a mock function with given fields: ctx, param
func (_m *IPostgreSQLRepository) InsertNewEvent(ctx context.Context, param *request.EventRequestMakeNew) (*entity.Event, error) {
	ret := _m.Called(ctx, param)

	var r0 *entity.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *request.EventRequestMakeNew) (*entity.Event, error)); ok {
		return rf(ctx, param)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *request.EventRequestMakeNew) *entity.Event); ok {
		r0 = rf(ctx, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *request.EventRequestMakeNew) error); ok {
		r1 = rf(ctx, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateParticipants provides a mock function with given fields: ctx, approvedAt, declinedAt, declinedReason, id
func (_m *IPostgreSQLRepository) UpdateParticipants(ctx context.Context, approvedAt *int64, declinedAt *int64, declinedReason *string, id int32) error {
	ret := _m.Called(ctx, approvedAt, declinedAt, declinedReason, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *int64, *int64, *string, int32) error); ok {
		r0 = rf(ctx, approvedAt, declinedAt, declinedReason, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserVerifiedTime provides a mock function with given fields: ctx, email
func (_m *IPostgreSQLRepository) UpdateUserVerifiedTime(ctx context.Context, email string) error {
	ret := _m.Called(ctx, email)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIPostgreSQLRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIPostgreSQLRepository creates a new instance of IPostgreSQLRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIPostgreSQLRepository(t mockConstructorTestingTNewIPostgreSQLRepository) *IPostgreSQLRepository {
	mock := &IPostgreSQLRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
