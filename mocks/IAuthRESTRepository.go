// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	response "github.com/aasumitro/tix/internal/domain/response"
)

// IAuthRESTRepository is an autogenerated mock type for the IAuthRESTRepository type
type IAuthRESTRepository struct {
	mock.Mock
}

// DeleteUser provides a mock function with given fields: ctx, uuid
func (_m *IAuthRESTRepository) DeleteUser(ctx context.Context, uuid string) (*response.SupabaseRespond, error) {
	ret := _m.Called(ctx, uuid)

	var r0 *response.SupabaseRespond
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*response.SupabaseRespond, error)); ok {
		return rf(ctx, uuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *response.SupabaseRespond); ok {
		r0 = rf(ctx, uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.SupabaseRespond)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InviteUserByEmail provides a mock function with given fields: ctx, email
func (_m *IAuthRESTRepository) InviteUserByEmail(ctx context.Context, email string) (*response.SupabaseRespond, error) {
	ret := _m.Called(ctx, email)

	var r0 *response.SupabaseRespond
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*response.SupabaseRespond, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *response.SupabaseRespond); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.SupabaseRespond)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendMagicLink provides a mock function with given fields: ctx, email
func (_m *IAuthRESTRepository) SendMagicLink(ctx context.Context, email string) (*response.SupabaseRespond, error) {
	ret := _m.Called(ctx, email)

	var r0 *response.SupabaseRespond
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*response.SupabaseRespond, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *response.SupabaseRespond); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.SupabaseRespond)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIAuthRESTRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIAuthRESTRepository creates a new instance of IAuthRESTRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIAuthRESTRepository(t mockConstructorTestingTNewIAuthRESTRepository) *IAuthRESTRepository {
	mock := &IAuthRESTRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
